{"version":3,"file":"index.modern.js","sources":["../src/components/Banner/index.tsx","../src/api.tsx","../src/components/Code/actions.tsx","../src/components/Login/actions.tsx","../src/components/Code/index.tsx","../src/components/Alerts/Forgot/index.tsx","../src/components/Alerts/Network/index.tsx","../src/components/Alerts/Time/index.tsx","../src/components/Alerts/Session/index.tsx","../src/components/Terms/actions.tsx","../src/components/Terms/index.tsx","../src/components/Login/index.tsx","../src/components/Recover/actions.tsx","../src/components/Recover/index.tsx","../src/index.tsx","../src/components/Locales/index.tsx","../src/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport styled from 'styled-components'\nimport { Grid, Image, Header } from '@mw-kit/mw-ui'\n\nimport logo from '../../assets/logo.svg'\n\nconst Wrapper = styled(Grid.Column)`\n  background-size: cover;\n  background-image: url('${(props) => props.background}');\n  &::before {\n    content: '';\n    background-color: rgba(52, 85, 171, 0.9);\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    z-index: 0;\n  }\n`\n\nconst Overlay = styled.div`\n  z-index: 1;\n  display: flex;\n  flex-direction: column;\n`\n\nconst Content = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  height: 100%;\n  & > p {\n    font-size: 16px;\n    padding: 0 1rem;\n  }\n`\n\nconst Footer = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nexport interface BannerProps {\n  logo?: string\n  background?: string\n  title: string\n  description: string\n  footer: string\n}\n\nexport const Banner = (props: BannerProps) => {\n  return (\n    <Wrapper background={props.background} color='blue'>\n      <Overlay>\n        <div>\n          <Image src={props.logo ? props.logo : logo} height={45} />\n        </div>\n        <Content>\n          <Header size='huge' inverted content={props.title} />\n          <p>{props.description}</p>\n        </Content>\n        <Footer>{props.footer}</Footer>\n      </Overlay>\n    </Wrapper>\n  )\n}\n\nBanner.defaultProps = {\n  background:\n    'https://iconesmw.s3-sa-east-1.amazonaws.com/trade_result/login/Background_Login.jpg'\n} as Partial<BannerProps>\n","import axios from 'axios'\n\nexport const api = axios.create({\n  baseURL: 'https://api.xpto.ninja', // 'http://odin.local:8083', //\n  headers: {\n    Accept: 'application/json',\n    'Content-Type': 'application/json'\n  }\n})\n\napi.interceptors.request.use(async (config) => {\n  const tokenKey = 'MwLoginToken'\n  const url = config.url\n  const language = localStorage.getItem('_LOCALE') || 'pt_BR'\n\n  config.headers['Accept-Language'] = language.replace('_', '-')\n\n  if (url === 'v1/users/token') {\n    sessionStorage.removeItem(tokenKey)\n    // never add token\n    return config\n  }\n\n  const token = sessionStorage.getItem(tokenKey)\n\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n\n  return config\n})\n","import { api } from '../../api'\n\nexport interface IPostUsersCheckCode {\n  account: number | string\n  code: string\n}\n\nexport function postUsersCheckCode(data: IPostUsersCheckCode) {\n  return api.post('v1/users/check-code', data)\n}\n","import { api } from '../../api'\n\nexport interface IgetToken {\n  account: number | string\n  username: string\n  password: string\n  force?: number\n  fail?: string\n}\n\nexport function getToken(data: IgetToken) {\n  return api.post('v1/users/token', data)\n}\n\nexport interface IPostUsersRecover {\n  account: number | string\n  username: string\n}\n\nexport function postUsersRecover(data: IPostUsersRecover) {\n  return api.post('v1/users/recover', data)\n}\n","import React, { useState } from 'react'\nimport {\n  Button,\n  Grid,\n  Form,\n  Header,\n  Input,\n  Segment,\n  Message\n} from '@mw-kit/mw-ui'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { useForm, Controller } from 'react-hook-form'\n\nimport ptBR from '../../i18n/locales/pt_BR.json'\nimport { FormattedMessage, useIntl } from 'react-intl'\n\nimport { IPostUsersCheckCode, postUsersCheckCode } from './actions'\nimport { postUsersRecover } from '../Login/actions'\n\nexport const Code = () => {\n  const [loading, setLoading] = useState<boolean>(false)\n  const [message, setMessage] = useState<string>('')\n\n  type Params = {\n    account: string\n    username: string\n    hash: string\n  }\n  const params: Params = useParams()\n  const history = useHistory()\n  const intl = useIntl()\n  const { control, formState, handleSubmit, register } = useForm<\n    IPostUsersCheckCode\n  >({\n    mode: 'onChange',\n    defaultValues: {\n      account: params.account,\n      code: params.hash === 'default' ? '' : params.hash\n    }\n  })\n\n  const { isValid } = formState\n\n  const resend = async () => {\n    const account = params.account || ''\n    const username = params.username || ''\n\n    // start loading\n    setLoading(true)\n\n    // reset messages\n    setMessage('')\n\n    try {\n      // get result\n      const res = await postUsersRecover({ account, username })\n\n      console.log(res)\n    } catch (error) {\n      console.log(error)\n    } finally {\n      // stop loading\n      setLoading(false)\n    }\n  }\n\n  const onSubmit = async (data: IPostUsersCheckCode) => {\n    try {\n      // clear message\n      setMessage('')\n\n      // get result\n      const res = await postUsersCheckCode(data)\n\n      // extract data\n      const d = res.data.data || {}\n      const token: string = d.token || ''\n      const userId: number = d.extra.users.id || 0\n\n      // save data\n      sessionStorage.setItem('MwLoginToken', token)\n\n      // redirect\n      history.push(`/recover/${data.account}/${userId}`)\n    } catch (error) {\n      const res = error.response?.data?.data\n      if (res) {\n        setMessage(res.message)\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Grid centered>\n        <Grid.Column width={8} textAlign='left' verticalAlign='middle'>\n          <Header size='large'>\n            <FormattedMessage\n              id='code.header.main'\n              defaultMessage={ptBR['code.header.main']}\n            />\n            <Header.Subheader>\n              <FormattedMessage\n                id='code.header.subheader'\n                defaultMessage={ptBR['code.header.subheader']}\n              />\n            </Header.Subheader>\n          </Header>\n          <br />\n          {message && <Message negative content={message} />}\n          <br />\n          <Form\n            onSubmit={handleSubmit(onSubmit)}\n            loading={formState.isSubmitting || loading}\n          >\n            <input name='account' type='hidden' ref={register} />\n            <Form.Field>\n              <Controller\n                as={Input}\n                name='code'\n                control={control}\n                rules={{ required: true }}\n                placeholder={intl.formatMessage({\n                  id: 'code.placeholder.code',\n                  defaultMessage: ptBR['code.placeholder.code']\n                })}\n                autoFocus\n              />\n            </Form.Field>\n            <Button\n              disabled={!isValid}\n              primary\n              type='submit'\n              fluid\n              content={intl.formatMessage({\n                id: 'code.button.submit',\n                defaultMessage: ptBR['code.button.submit']\n              })}\n            />\n            <Segment basic textAlign='center'>\n              <FormattedMessage\n                id='code.not_received'\n                defaultMessage={ptBR['code.not_received']}\n              />{' '}\n              <a href='#' onClick={resend}>\n                <FormattedMessage\n                  id='code.resend'\n                  defaultMessage={ptBR['code.resend']}\n                />\n              </a>\n            </Segment>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </React.Fragment>\n  )\n}\n","import React from 'react'\nimport { Button, Confirm, StrictConfirmProps } from '@mw-kit/mw-ui'\n\nimport ptBR from '../../../i18n/locales/pt_BR.json'\nimport { useIntl } from 'react-intl'\n\nexport const AlertsForgot = (props: StrictConfirmProps) => {\n  const intl = useIntl()\n\n  const header = intl.formatMessage({\n    id: 'alerts.forgot.header',\n    defaultMessage: ptBR['alerts.forgot.header']\n  })\n\n  const content = intl.formatMessage({\n    id: 'alerts.forgot.content',\n    defaultMessage: ptBR['alerts.forgot.content']\n  })\n\n  return (\n    <Confirm\n      open={props.open}\n      size='tiny'\n      onConfirm={props.onConfirm}\n      header={header}\n      content={content}\n      cancelButton={<React.Fragment />}\n      confirmButton={<Button content='Ok' />}\n    />\n  )\n}\n","import React from 'react'\nimport { Button, Confirm, StrictConfirmProps } from '@mw-kit/mw-ui'\n\nimport ptBR from '../../../i18n/locales/pt_BR.json'\nimport { useIntl } from 'react-intl'\n\nexport const AlertsNetwork = (props: StrictConfirmProps) => {\n  const intl = useIntl()\n\n  const header = intl.formatMessage({\n    id: 'alerts.network.header',\n    defaultMessage: ptBR['alerts.network.header']\n  })\n\n  const content = intl.formatMessage({\n    id: 'alerts.network.content',\n    defaultMessage: ptBR['alerts.network.content']\n  })\n\n  return (\n    <Confirm\n      open={props.open}\n      size='tiny'\n      onConfirm={props.onConfirm}\n      header={header}\n      content={content}\n      cancelButton={<React.Fragment />}\n      confirmButton={<Button negative content='Ok' />}\n    />\n  )\n}\n","import React from 'react'\nimport { Button, Confirm, StrictConfirmProps } from '@mw-kit/mw-ui'\n\nimport ptBR from '../../../i18n/locales/pt_BR.json'\nimport { useIntl } from 'react-intl'\n\nexport const AlertsTime = (props: StrictConfirmProps) => {\n  const intl = useIntl()\n\n  const header = intl.formatMessage({\n    id: 'alerts.time.header',\n    defaultMessage: ptBR['alerts.time.header']\n  })\n\n  const content = intl.formatMessage({\n    id: 'alerts.time.content',\n    defaultMessage: ptBR['alerts.time.content']\n  })\n\n  return (\n    <Confirm\n      open={props.open}\n      size='tiny'\n      onConfirm={props.onConfirm}\n      header={header}\n      content={content}\n      cancelButton={<React.Fragment />}\n      confirmButton={<Button negative content='Ok' />}\n    />\n  )\n}\n","import React from 'react'\nimport { Confirm, StrictConfirmProps } from '@mw-kit/mw-ui'\n\nimport ptBR from '../../../i18n/locales/pt_BR.json'\nimport { useIntl } from 'react-intl'\n\nexport const AlertsSession = (props: StrictConfirmProps) => {\n  const intl = useIntl()\n\n  const header = intl.formatMessage({\n    id: 'alerts.session.header',\n    defaultMessage: ptBR['alerts.session.header']\n  })\n\n  const content = intl.formatMessage({\n    id: 'alerts.session.content',\n    defaultMessage: ptBR['alerts.session.content']\n  })\n\n  return (\n    <Confirm\n      open={props.open}\n      size='tiny'\n      onCancel={props.onCancel}\n      onConfirm={props.onConfirm}\n      header={header}\n      content={content}\n      cancelButton={intl.formatMessage({\n        id: 'cancel',\n        defaultMessage: ptBR.cancel\n      })}\n      confirmButton={intl.formatMessage({\n        id: 'confirm',\n        defaultMessage: ptBR.confirm\n      })}\n    />\n  )\n}\n","import { api } from '../../api'\n\nexport interface getTermProps {\n  id: number\n}\n\nexport function getTerm(data: getTermProps) {\n  return api.get(`v1/terms/${data.id}`)\n}\n\nexport function postTermsAccept(id: number) {\n  return api.post(`v1/terms/accept/${id}`)\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n  Button,\n  Header,\n  Modal,\n  Placeholder,\n  Checkbox,\n  StrictModalProps\n} from '@mw-kit/mw-ui'\nimport styled from 'styled-components'\n\nimport ptBR from '../../i18n/locales/pt_BR.json'\nimport { useIntl, FormattedMessage } from 'react-intl'\n\nimport { getTerm, postTermsAccept } from './actions'\n\ntype Terms = {\n  id: number\n}\n\ninterface TermsProps extends StrictModalProps {\n  term: Terms\n  onCancel: CallableFunction\n  onSuccess: CallableFunction\n}\n\ninterface TermEntity {\n  id: number | string\n  content: string\n}\n\nconst FakeTerms = () => {\n  return (\n    <Placeholder fluid>\n      <Placeholder.Paragraph>\n        <Placeholder.Line />\n        <Placeholder.Line />\n        <Placeholder.Line />\n      </Placeholder.Paragraph>\n      <Placeholder.Paragraph>\n        <Placeholder.Line />\n        <Placeholder.Line />\n        <Placeholder.Line />\n        <Placeholder.Line />\n      </Placeholder.Paragraph>\n      <Placeholder.Paragraph>\n        <Placeholder.Line />\n        <Placeholder.Line />\n        <Placeholder.Line />\n        <Placeholder.Line />\n      </Placeholder.Paragraph>\n    </Placeholder>\n  )\n}\n\nconst WrapperModalActions = styled(Modal.Actions)`\n  display: flex;\n  align-items: center;\n  & > div:first-child {\n    text-align: left;\n    flex-grow: 1;\n  }\n`\n\nexport const Terms = (props: TermsProps) => {\n  const [saving, setSaving] = useState<boolean>(false)\n  const [loading, setLoading] = useState<boolean>(false)\n  const [accept, setAccept] = useState<boolean | undefined>(false)\n  const [term, setTerm] = useState<TermEntity>({\n    id: '',\n    content: ''\n  })\n\n  const intl = useIntl()\n  const termId = props.term.id\n\n  useEffect(() => {\n    if (!termId) {\n      return\n    }\n\n    // Create an scoped async function in the hook\n    async function getData() {\n      setLoading(true)\n      try {\n        // get term\n        const res = await getTerm(props.term)\n\n        // set term\n        setTerm(res.data.data)\n      } catch (error) {\n        console.log('error', error)\n      } finally {\n        setLoading(false)\n      }\n    }\n    // Execute the created function directly\n    getData()\n  }, [termId])\n\n  const handleAccept = async () => {\n    try {\n      setSaving(true)\n\n      // accept terms\n      const res = await postTermsAccept(termId)\n\n      // return data\n      props.onSuccess(res.data)\n    } catch (error) {\n      console.log(error)\n    } finally {\n      setSaving(false)\n    }\n  }\n\n  return (\n    <Modal open={props.open} size='small'>\n      <Header>\n        <FormattedMessage\n          id='terms.header'\n          defaultMessage={ptBR['terms.header']}\n        />\n      </Header>\n      <Modal.Content scrolling>\n        {loading ? (\n          <FakeTerms />\n        ) : (\n          <p dangerouslySetInnerHTML={{ __html: term.content }} />\n        )}\n      </Modal.Content>\n      <WrapperModalActions>\n        <Checkbox\n          checked={accept}\n          label={intl.formatMessage({\n            id: 'terms.accept',\n            defaultMessage: ptBR['terms.accept']\n          })}\n          onChange={(e, { checked }) => {\n            setAccept(checked)\n          }}\n        />\n        <div>\n          <Button\n            basic\n            onClick={() => props.onCancel()}\n            content={intl.formatMessage({\n              id: 'generic.back',\n              defaultMessage: ptBR['generic.back']\n            })}\n          />\n\n          <Button\n            disabled={!accept || saving}\n            primary\n            onClick={handleAccept}\n            loading={saving}\n            content={intl.formatMessage({\n              id: 'generic.continue',\n              defaultMessage: ptBR['generic.continue']\n            })}\n          />\n        </div>\n      </WrapperModalActions>\n    </Modal>\n  )\n}\n","import React, { useState, useRef } from 'react'\nimport {\n  Form,\n  Checkbox,\n  Button,\n  Grid,\n  Header,\n  Input,\n  Message\n} from '@mw-kit/mw-ui'\nimport { useForm, Controller } from 'react-hook-form'\nimport { useHistory } from 'react-router-dom'\n\n// validator\nimport * as yup from 'yup'\nimport { yupResolver } from '@hookform/resolvers'\n\n// get actions\nimport { IgetToken, getToken, postUsersRecover } from './actions'\n\n// get styles\nimport styled from 'styled-components'\n\nimport {\n  AlertsForgot,\n  AlertsSession,\n  AlertsNetwork,\n  AlertsTime\n} from '../Alerts'\nimport { Terms } from '../Terms'\nimport { FormattedMessage, useIntl } from 'react-intl'\n\nimport ptBR from '../../i18n/locales/pt_BR.json'\n\ninterface LoginProps {\n  onSuccess: CallableFunction\n}\n\nconst WrapperForgot = styled(Form.Field)`\n  position: absolute;\n  right: 0;\n`\n\nexport const Login = (props: LoginProps) => {\n  const mwLogin = JSON.parse(localStorage.getItem('MwLogin') || '{}')\n  const mwLoginRemember = !!mwLogin.account\n\n  const [showPassword, toggleShowPassword] = useState<boolean>(false)\n  const [showFailSession, setShowFailSession] = useState<boolean>(false)\n  const [showFailNetwork, setShowFailNetwork] = useState<boolean>(false)\n  const [showFailTime, setShowFailTime] = useState<boolean>(false)\n  const [showFailTerms, setShowFailTerms] = useState<boolean>(false)\n  const [showAlertForgot, setShowAlertForgot] = useState<boolean>(false)\n  const [loading, setLoading] = useState<boolean>(false)\n  const [account, setAccount] = useState<string | number>('')\n  const [username, setUsername] = useState<string>('')\n  const [remember, setRemember] = useState<boolean>(mwLoginRemember)\n\n  const [message, setMessage] = useState<string>('')\n  const [termId, setTermId] = useState<number>(0)\n\n  const loginSchema = yup.object().shape({\n    account: yup.number().required().positive().integer(),\n    username: yup.string().required(),\n    password: yup.string().required(),\n    force: yup.number(),\n    fail: yup.string()\n  })\n\n  const {\n    control,\n    handleSubmit,\n    register,\n    formState,\n    setValue,\n    getValues,\n    errors\n  } = useForm<IgetToken>({\n    mode: 'onChange',\n    defaultValues: {\n      account: mwLogin.account || '',\n      username: mwLogin.username || '',\n      password: '',\n      force: 0,\n      fail: ''\n    },\n    resolver: yupResolver(loginSchema)\n  })\n\n  const refLoginForm = useRef<HTMLFormElement>(null)\n  const history = useHistory()\n  const intl = useIntl()\n  const { isValid } = formState\n\n  const handleSuccess = (user: any) => {\n    props.onSuccess(user)\n\n    alert('success!')\n  }\n\n  const handleForgot = async () => {\n    // get values\n    const values = getValues()\n\n    // valid\n    if (errors.account || errors.username) {\n      setMessage('dados invalidos')\n      return\n    }\n\n    // start loading\n    setLoading(true)\n\n    // clean message\n    setMessage('')\n\n    try {\n      // dispath recover\n      await postUsersRecover(values)\n\n      // set account\n      setAccount(values.account)\n      setUsername(values.username)\n\n      // show alert\n      setShowAlertForgot(true)\n    } catch (error) {\n      console.log(error)\n    } finally {\n      // stop loading\n      setLoading(false)\n    }\n  }\n\n  const onSubmit = async (data: IgetToken) => {\n    if (remember) {\n      localStorage.setItem(\n        'MwLogin',\n        JSON.stringify({\n          account: data.account,\n          username: data.username\n        })\n      )\n    } else {\n      localStorage.removeItem('MwLogin')\n    }\n\n    try {\n      // clear message\n      setMessage('')\n\n      // get token\n      const res = await getToken(data)\n\n      // extract data\n      const token: string = res.data.data.token || ''\n      const fail: string = res.data.data.fail || ''\n      const extra: any = res.data.data.extra || {}\n\n      if (token && fail === '') {\n        // call success\n        handleSuccess(res.data)\n      } else if (fail === 'terms') {\n        // set temporary token\n        sessionStorage.setItem('MwLoginToken', token)\n\n        // set term id\n        setTermId(extra.terms?.id)\n\n        // call terms modal\n        setShowFailTerms(true)\n      } else if (fail === 'session') {\n        // call session modal\n        setShowFailSession(true)\n      } else if (fail === 'network') {\n        // call network modal\n        setShowFailNetwork(true)\n      } else if (fail === 'time') {\n        // call time modal\n        setShowFailTime(true)\n      }\n    } catch (error) {\n      const res = error.response?.data?.data\n      if (res) {\n        setMessage(res.message)\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <AlertsForgot\n        open={showAlertForgot}\n        onConfirm={() => {\n          history.push(`/code/${account}/${username}/default`)\n        }}\n      />\n\n      <AlertsNetwork\n        open={showFailNetwork}\n        onConfirm={() => setShowFailNetwork(false)}\n      />\n\n      <AlertsSession\n        open={showFailSession}\n        onCancel={() => setShowFailSession(false)}\n        onConfirm={() => {\n          // force login\n          setValue('force', 1)\n\n          // hide modal\n          setShowFailSession(false)\n\n          // dispath form\n          refLoginForm?.current?.handleSubmit()\n        }}\n      />\n\n      <AlertsTime\n        open={showFailTime}\n        onConfirm={() => setShowFailTime(false)}\n      />\n\n      <Terms\n        open={showFailTerms}\n        term={{ id: termId }}\n        onCancel={() => setShowFailTerms(false)}\n        onSuccess={(data: any) => {\n          // close modal\n          setShowFailTerms(false)\n\n          // call success\n          handleSuccess(data)\n        }}\n      />\n\n      <Grid centered>\n        <Grid.Column width={8} textAlign='left' verticalAlign='middle'>\n          <Header size='large'>\n            <FormattedMessage\n              id='login.header.main'\n              defaultMessage={ptBR['login.header.main']}\n            />\n          </Header>\n          <br />\n          {message && <Message negative content={message} />}\n          <br />\n          <Form\n            ref={refLoginForm}\n            onSubmit={handleSubmit(onSubmit)}\n            loading={formState.isSubmitting || loading}\n          >\n            <input name='force' type='hidden' ref={register} />\n            <input name='fail' type='hidden' ref={register} />\n            <Form.Field>\n              <label>\n                <FormattedMessage\n                  id='login.label.account'\n                  defaultMessage={ptBR['login.label.account']}\n                />\n              </label>\n              <Controller\n                as={Input}\n                name='account'\n                control={control}\n                placeholder={intl.formatMessage({\n                  id: 'login.placeholder.account',\n                  defaultMessage: ptBR['login.placeholder.account']\n                })}\n                autoFocus\n              />\n            </Form.Field>\n            <Form.Field>\n              <label>\n                <FormattedMessage\n                  id='login.label.username'\n                  defaultMessage={ptBR['login.label.username']}\n                />\n              </label>\n              <Controller\n                as={Input}\n                name='username'\n                control={control}\n                placeholder={intl.formatMessage({\n                  id: 'login.placeholder.username',\n                  defaultMessage: ptBR['login.placeholder.username']\n                })}\n              />\n            </Form.Field>\n            <Form.Field>\n              <label>\n                <FormattedMessage\n                  id='login.label.password'\n                  defaultMessage={ptBR['login.label.password']}\n                />\n              </label>\n              <Controller\n                as={Input}\n                name='password'\n                type={showPassword ? 'text' : 'password'}\n                control={control}\n                icon={{\n                  name: `eye${showPassword ? ' slash' : ''}`,\n                  link: true,\n                  onClick: () => toggleShowPassword(!showPassword)\n                }}\n                placeholder={intl.formatMessage({\n                  id: 'login.placeholder.password',\n                  defaultMessage: ptBR['login.placeholder.password']\n                })}\n              />\n            </Form.Field>\n\n            <Form.Group>\n              <Form.Field>\n                <Checkbox\n                  name='remember'\n                  label={intl.formatMessage({\n                    id: 'login.label.remember',\n                    defaultMessage: ptBR['login.label.remember']\n                  })}\n                  checked={remember}\n                  onChange={() => setRemember(!remember)}\n                  ref={register}\n                />\n              </Form.Field>\n              <WrapperForgot>\n                <a href='#' onClick={handleForgot}>\n                  <FormattedMessage\n                    id='login.forgot'\n                    defaultMessage={ptBR['login.forgot']}\n                  />\n                </a>\n              </WrapperForgot>\n            </Form.Group>\n            <Button disabled={!isValid} primary type='submit' fluid>\n              <FormattedMessage\n                id='login.button.submit'\n                defaultMessage={ptBR['login.button.submit']}\n              />\n            </Button>\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </React.Fragment>\n  )\n}\n","import { api } from '../../api'\n\nexport interface IPutUsersPassword {\n  id: number\n  password: string\n  password_confirm?: string\n}\n\nexport function putUsersPassword(data: IPutUsersPassword) {\n  return api.put(`v1/users/${data.id}`, data)\n}\n","import React, { useState } from 'react'\nimport { Button, Grid, Form, Header, Input, Message } from '@mw-kit/mw-ui'\nimport { useParams, useHistory } from 'react-router-dom'\nimport { useForm, Controller } from 'react-hook-form'\n\nimport ptBR from '../../i18n/locales/pt_BR.json'\nimport { FormattedMessage, useIntl } from 'react-intl'\n\n// validator\nimport * as yup from 'yup'\nimport { yupResolver } from '@hookform/resolvers'\n\nimport { IPutUsersPassword, putUsersPassword } from './actions'\n\nexport const Recover = () => {\n  const [message, setMessage] = useState<string>('')\n\n  type Params = {\n    account: any\n    id: any\n  }\n\n  const params: Params = useParams()\n  const history = useHistory()\n  const intl = useIntl()\n  const RecoverSchema = yup.object().shape({\n    id: yup.number().required().positive().integer(),\n    password: yup.string().required(),\n    password_confirm: yup\n      .string()\n      .required()\n      .equals([yup.ref('password')])\n  })\n\n  const { control, formState, handleSubmit, register } = useForm<\n    IPutUsersPassword\n  >({\n    mode: 'onChange',\n    defaultValues: {\n      id: params.id,\n      password: '',\n      password_confirm: ''\n    },\n    resolver: yupResolver(RecoverSchema)\n  })\n\n  const { isValid } = formState\n\n  const onSubmit = async (data: IPutUsersPassword) => {\n    try {\n      // clear message\n      setMessage('')\n\n      // get result\n      await putUsersPassword(data)\n\n      // go login\n      history.push('/')\n    } catch (error) {\n      const res = error.response?.data?.data\n      if (res) {\n        setMessage(res.message)\n      }\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <Grid centered>\n        <Grid.Column width={8} textAlign='left' verticalAlign='middle'>\n          <Header size='large'>\n            <FormattedMessage\n              id='recover.header.main'\n              defaultMessage={ptBR['recover.header.main']}\n            />\n          </Header>\n          <br />\n          {message && <Message negative content={message} />}\n          <br />\n          <Form\n            onSubmit={handleSubmit(onSubmit)}\n            loading={formState.isSubmitting}\n          >\n            <input name='id' type='hidden' ref={register} />\n            <Form.Field>\n              <label>Nova senha</label>\n              <Controller\n                as={Input}\n                type='password'\n                name='password'\n                control={control}\n                rules={{ required: true }}\n                placeholder={intl.formatMessage({\n                  id: 'recover.placeholder.password',\n                  defaultMessage: ptBR['recover.placeholder.password']\n                })}\n                autoFocus\n              />\n            </Form.Field>\n            <Form.Field>\n              <label>Repetir senha</label>\n              <Controller\n                as={Input}\n                type='password'\n                name='password_confirm'\n                control={control}\n                rules={{ required: true }}\n                placeholder={intl.formatMessage({\n                  id: 'recover.placeholder.password_confirm',\n                  defaultMessage: ptBR['recover.placeholder.password_confirm']\n                })}\n              />\n            </Form.Field>\n            <Button\n              disabled={!isValid}\n              primary\n              type='submit'\n              fluid\n              content={intl.formatMessage({\n                id: 'recover.button.submit',\n                defaultMessage: ptBR['recover.button.submit']\n              })}\n            />\n          </Form>\n        </Grid.Column>\n      </Grid>\n    </React.Fragment>\n  )\n}\n","import React, { createContext, useState } from 'react'\nimport { IntlProvider } from 'react-intl'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Grid } from '@mw-kit/mw-ui'\n\nimport {\n  Banner,\n  BannerProps,\n  Code,\n  Login,\n  Recover,\n  Locales\n} from './components'\n\nimport styled from 'styled-components'\nimport ptBR from './i18n/locales/pt_BR.json'\nimport enUS from './i18n/locales/en_US.json'\n\ninterface MwLoginProps {\n  basename: string\n  banner: BannerProps\n  onSuccess: CallableFunction\n}\n\nif (!localStorage.hasOwnProperty('_LOCALE')) {\n  localStorage.setItem('_LOCALE', navigator.language.replace('-', '_'))\n}\n\nconst localeLocal = localStorage.getItem('_LOCALE') || 'pt_BR'\nconst Container = styled(Grid)`\n  margin: 0 !important;\n  height: 100%;\n`\n\nconst messages = {\n  pt_BR: ptBR,\n  en_US: enUS\n}\n\ninterface ContextProps {\n  locale: string\n  changeLocale: CallableFunction\n}\n\nexport const Context = createContext<Partial<ContextProps>>({})\n\nexport const MwLogin = (props: MwLoginProps) => {\n  console.log('localeLocal', localeLocal)\n\n  const [locale, setLocale] = useState<string>(localeLocal)\n\n  const changeLocale = (locale: string) => {\n    // change locale\n    setLocale(locale)\n\n    // save on local storate\n    localStorage.setItem('_LOCALE', locale)\n  }\n\n  return (\n    <Context.Provider value={{ locale, changeLocale }}>\n      <IntlProvider\n        locale={locale.replace('_', '-')}\n        messages={messages[locale]}\n      >\n        <Router basename={props.basename}>\n          <Container stackable stretched textAlign='center'>\n            <Grid.Row columns='equal'>\n              <Banner {...props.banner} />\n              <Grid.Column>\n                <Locales />\n                <Switch>\n                  <Route exact path='/login'>\n                    <Login {...props} />\n                  </Route>\n                  <Route exact path='/code/:account/:username/:hash'>\n                    <Code />\n                  </Route>\n                  <Route exact path='/recover/:account/:id'>\n                    <Recover />\n                  </Route>\n                  <Route>\n                    <Login {...props} />\n                  </Route>\n                </Switch>\n              </Grid.Column>\n            </Grid.Row>\n          </Container>\n        </Router>\n      </IntlProvider>\n    </Context.Provider>\n  )\n}\n","import React, { useContext } from 'react'\nimport { Dropdown } from '@mw-kit/mw-ui'\nimport styled from 'styled-components'\nimport { Context } from '../../index'\n\nconst languages = {\n  en_US: 'English',\n  pt_BR: 'Português'\n}\n\nconst Wrapper = styled.div`\n  position: absolute;\n  right: 1rem;\n`\n\nexport const Locales = () => {\n  const options = [\n    {\n      key: 'en_US',\n      text: 'English',\n      value: 'en_US'\n    },\n    {\n      key: 'pt_BR',\n      text: 'Português',\n      value: 'pt_BR'\n    }\n  ]\n\n  const context = useContext(Context)\n\n  return (\n    <Wrapper>\n      <Dropdown\n        text={languages[context.locale || 'pt_BR']}\n        direction='left'\n        options={options}\n        value={context.locale}\n        onChange={(e, { value }) => {\n          context.changeLocale && context.changeLocale(value)\n        }}\n      />\n    </Wrapper>\n  )\n}\n","import React, { createContext, useState } from 'react'\nimport { IntlProvider } from 'react-intl'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { Grid } from '@mw-kit/mw-ui'\n\nimport {\n  Banner,\n  BannerProps,\n  Code,\n  Login,\n  Recover,\n  Locales\n} from './components'\n\nimport styled from 'styled-components'\nimport ptBR from './i18n/locales/pt_BR.json'\nimport enUS from './i18n/locales/en_US.json'\n\ninterface MwLoginProps {\n  basename: string\n  banner: BannerProps\n  onSuccess: CallableFunction\n}\n\nif (!localStorage.hasOwnProperty('_LOCALE')) {\n  localStorage.setItem('_LOCALE', navigator.language.replace('-', '_'))\n}\n\nconst localeLocal = localStorage.getItem('_LOCALE') || 'pt_BR'\nconst Container = styled(Grid)`\n  margin: 0 !important;\n  height: 100%;\n`\n\nconst messages = {\n  pt_BR: ptBR,\n  en_US: enUS\n}\n\ninterface ContextProps {\n  locale: string\n  changeLocale: CallableFunction\n}\n\nexport const Context = createContext<Partial<ContextProps>>({})\n\nexport const MwLogin = (props: MwLoginProps) => {\n  console.log('localeLocal', localeLocal)\n\n  const [locale, setLocale] = useState<string>(localeLocal)\n\n  const changeLocale = (locale: string) => {\n    // change locale\n    setLocale(locale)\n\n    // save on local storate\n    localStorage.setItem('_LOCALE', locale)\n  }\n\n  return (\n    <Context.Provider value={{ locale, changeLocale }}>\n      <IntlProvider\n        locale={locale.replace('_', '-')}\n        messages={messages[locale]}\n      >\n        <Router basename={props.basename}>\n          <Container stackable stretched textAlign='center'>\n            <Grid.Row columns='equal'>\n              <Banner {...props.banner} />\n              <Grid.Column>\n                <Locales />\n                <Switch>\n                  <Route exact path='/login'>\n                    <Login {...props} />\n                  </Route>\n                  <Route exact path='/code/:account/:username/:hash'>\n                    <Code />\n                  </Route>\n                  <Route exact path='/recover/:account/:id'>\n                    <Recover />\n                  </Route>\n                  <Route>\n                    <Login {...props} />\n                  </Route>\n                </Switch>\n              </Grid.Column>\n            </Grid.Row>\n          </Container>\n        </Router>\n      </IntlProvider>\n    </Context.Provider>\n  )\n}\n"],"names":["Wrapper","styled","Grid","Column","props","background","Overlay","div","Content","Footer","Banner","React","color","Image","src","logo","height","Header","size","inverted","content","title","description","footer","defaultProps","api","axios","create","baseURL","headers","Accept","interceptors","request","use","config","tokenKey","url","language","localStorage","getItem","replace","sessionStorage","removeItem","token","Authorization","postUsersCheckCode","data","post","getToken","postUsersRecover","Code","loading","setLoading","useState","message","setMessage","params","useParams","history","useHistory","intl","useIntl","control","formState","handleSubmit","register","useForm","mode","defaultValues","account","code","hash","isValid","resend","username","res","console","log","error","onSubmit","d","userId","extra","users","id","setItem","push","response","Fragment","centered","width","textAlign","verticalAlign","FormattedMessage","defaultMessage","ptBR","Subheader","Message","negative","Form","isSubmitting","name","type","ref","Field","Controller","as","Input","rules","required","placeholder","formatMessage","autoFocus","Button","disabled","primary","fluid","Segment","basic","href","onClick","AlertsForgot","header","Confirm","open","onConfirm","cancelButton","confirmButton","AlertsNetwork","AlertsTime","AlertsSession","onCancel","cancel","confirm","getTerm","get","postTermsAccept","FakeTerms","Placeholder","Paragraph","Line","WrapperModalActions","Modal","Actions","Terms","saving","setSaving","accept","setAccept","term","setTerm","termId","useEffect","getData","handleAccept","onSuccess","scrolling","dangerouslySetInnerHTML","__html","Checkbox","checked","label","onChange","e","WrapperForgot","Login","mwLogin","JSON","parse","mwLoginRemember","showPassword","toggleShowPassword","showFailSession","setShowFailSession","showFailNetwork","setShowFailNetwork","showFailTime","setShowFailTime","showFailTerms","setShowFailTerms","showAlertForgot","setShowAlertForgot","setAccount","setUsername","remember","setRemember","setTermId","loginSchema","yup","shape","positive","integer","password","force","fail","setValue","getValues","errors","resolver","yupResolver","refLoginForm","useRef","handleSuccess","user","alert","handleForgot","values","stringify","terms","current","icon","link","Group","putUsersPassword","put","Recover","RecoverSchema","password_confirm","equals","hasOwnProperty","navigator","localeLocal","Container","Context","createContext","languages","en_US","pt_BR","Locales","options","key","text","value","context","useContext","Dropdown","locale","direction","changeLocale","messages","enUS","MwLogin","setLocale","Provider","IntlProvider","Router","basename","stackable","stretched","Row","columns","banner","Switch","Route","exact","path"],"mappings":"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"}